# -*- coding: utf-8 -*-
"""Logistic_Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YstkZuw1Ea8abmBjVCpQFFpUV9TIQRGj
"""

import pandas as pd
import nltk
from nltk.corpus import stopwords
from nltk.stem import WordNetLemmatizer
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report

import pandas as pd

def read_file_to_df(file_path):
    with open(file_path, 'r', encoding='latin-1') as file:
        lines = file.readlines()
    data = [line.strip().split('@') for line in lines if line.strip()]
    return pd.DataFrame(data, columns=['Sentence', 'Label'])

#combining the datasets
file_path_all_agree = 'Sentences_AllAgree.txt'
file_path_66_agree = 'Sentences_66Agree.txt'
file_path_75_agree = 'Sentences_75Agree.txt'
file_path_50_agree = 'Sentences_50Agree.txt'

df_all_agree = read_file_to_df(file_path_all_agree)
df_66_agree = read_file_to_df(file_path_66_agree)
df_75_agree = read_file_to_df(file_path_75_agree)
df_50_agree = read_file_to_df(file_path_50_agree)


combined_df = pd.concat([df_all_agree, df_66_agree, df_50_agree, df_75_agree], ignore_index=True)

print(combined_df.head())

nltk.download('stopwords')
nltk.download('wordnet')
nltk.download('punkt')

lemmatizer = WordNetLemmatizer()

def preprocess_text(text):
    text = text.lower()
    words = nltk.word_tokenize(text)
    words = [word for word in words if word.isalpha() and word not in stopwords.words('english')]
    lemmatized_words = [lemmatizer.lemmatize(word) for word in words]
    return ' '.join(lemmatized_words)

combined_df['Processed_Sentence'] = combined_df['Sentence'].apply(preprocess_text)

vectorizer = CountVectorizer()
X = vectorizer.fit_transform(combined_df['Processed_Sentence'])
y = combined_df['Label']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

lr_model = LogisticRegression(max_iter=1000)
lr_model.fit(X_train, y_train)

y_pred = lr_model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)
print("\nClassification Report:\n", classification_report(y_test, y_pred))

import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix
import seaborn as sns
cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt='d')
plt.title('Confusion Matrix')
plt.ylabel('Actual Label')
plt.xlabel('Predicted Label')
plt.show()